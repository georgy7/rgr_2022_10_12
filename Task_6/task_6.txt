Навскидку:

1. Получение ip-адреса
    1.1 Проверка в файле hosts
    1.2 Если не найдено, DNS loockup
2. Установка TCP-соединения по порту 80 или 443, в зависимости от браузера. Скорее всего, современные браузеры
   попытаются подключиться сразу по https. Ну, строго говоря, всё не обязано должно происходить в одном соединении.
   Соединения могут устанавливаться и разрываться много раз даже во время следующего шага. И наоборот, обработка
   нескольких HTTP-запросов может происходить в одном TCP-соединении.
3. Если используется https, происходит TSL/SSL рукопожатие:
    3.1 Клиент шлёт на сервер свою версию протокола и поддерживаемые шифры
    3.2 Сервер передаёт клиенту сертификат, в котором открытый ключ, которым клиент может шифровать сообщения,
        передаваемые серверу. У сервера остаётся секретный ключ, которым сообщения расшифровываются.
    3.3 Клиент проверяет даты в сертификате и цепочку подписей сертификатов вплоть до корневого, который должен уже
        присутствовать на клиентском компьютере. Если подтвердить подписи не удаётся или корневой сертификат
        отсутствует, пользователю демонстрируется сообщение о небезопасном соединении, где он может отказаться
        от посещения сайта или всё равно согласиться использовать этот потенциально подставной сертификат посредника.
    3.4 Клиент генерирует pre-master ключ для синхронного шифрования, шифрует его открытым ключом сервера и передаёт
        на сервер. Из этого ключа клиент и сервер независимо получают мастер-ключ синхронного шифрования.
        Тут может возникнуть вопрос, почему не генерировать сразу мастер-ключ на клиенте и не передавать его, раз мы
        его всё равно шифруем. Насколько я понимаю, идея в следующем. Ключ синхронного шифрования имеет константную
        длину, а сертификат может не меняться годами. Злоумышленник может заранее сделать словарь всех возможных
        зашифрованных мастер-ключей, если там обозримое число возможных комбинаций, и в момент рукопожатия найти ключ
        по словарю. Поэтому передаётся ключ произвольной длины, для которого составить такой словарь на много-много
        порядков сложнее.
    3.5 Стороны обмениваются всеми предыдущими сообщениями, переданными в ходе этой процедуры, зашифрованными
        синхронным алгоритмом и ключом, о которых договорились, и, в случае успеха, шлют друг другу сообщения о том,
        что все последующие сообщения будут зашифрованы синхронным шифром.
        Подробнее можно почитать здесь (я туда подсматривал):
        https://www.opennet.ru/docs/RUS/ldap_apacheds/tech/ssl.html#tls-detail
4. Браузер шлёт GET-запрос для пути /
5. Дальше скорее всего Nginx используется как reverse-proxy. При этом тяжёлые картинки (папка dist) отдаются как
   статика самим Nginx, а все остальные запросы идут на Apache.
6. Либо на уровне Nginx, либо на уровне .htaccess, URL вида /a/b/c превращается во что-то вроде /index.pl?path=/a/b/c
